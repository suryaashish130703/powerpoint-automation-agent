"""
Email Logger Module for PowerPoint Automation Agent
Sends execution logs and results via email
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
import json

class EmailLogger:
    def __init__(self):
        """Initialize email logger with configuration from environment variables"""
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        self.recipient_email = os.getenv('RECIPIENT_EMAIL')
        
        # Validate configuration
        if not all([self.sender_email, self.sender_password, self.recipient_email]):
            print("Warning: Email configuration incomplete. Email logging disabled.")
            self.enabled = False
        else:
            self.enabled = True
    
    def send_log_email(self, logs, subject="PowerPoint Automation Logs", include_attachments=False):
        """
        Send logs via email
        
        Args:
            logs (list): List of log messages
            subject (str): Email subject
            include_attachments (bool): Whether to include any attachments
        """
        if not self.enabled:
            print("Email logging is disabled due to incomplete configuration.")
            return False
        
        try:
            # Create message
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = f"{subject} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Create email body
            body = self._format_logs(logs)
            msg.attach(MIMEText(body, 'html'))
            
            # Connect to server and send email
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.sender_email, self.sender_password)
            
            text = msg.as_string()
            server.sendmail(self.sender_email, self.recipient_email, text)
            server.quit()
            
            print(f"SUCCESS: Email sent successfully to {self.recipient_email}")
            return True
            
        except Exception as e:
            print(f"ERROR: Error sending email: {str(e)}")
            return False
    
    def send_success_email(self, final_result, execution_time, logs):
        """Send success notification with results"""
        subject = "‚úÖ PowerPoint Automation - SUCCESS"
        body = f"""
        <h2>üéâ PowerPoint Automation Completed Successfully!</h2>
        
        <h3>üìä Final Result:</h3>
        <p><strong>Generated Number:</strong> {final_result}</p>
        
        <h3>‚è±Ô∏è Execution Details:</h3>
        <ul>
            <li><strong>Execution Time:</strong> {execution_time:.2f} seconds</li>
            <li><strong>Timestamp:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</li>
            <li><strong>Status:</strong> ‚úÖ SUCCESS</li>
        </ul>
        
        <h3>üìù Detailed Logs:</h3>
        <pre>{self._format_logs_plain(logs)}</pre>
        
        <p><em>This email was automatically generated by the PowerPoint Automation Agent.</em></p>
        """
        
        return self._send_custom_email(subject, body)
    
    def send_error_email(self, error_message, logs):
        """Send error notification"""
        subject = "‚ùå PowerPoint Automation - ERROR"
        body = f"""
        <h2>‚ö†Ô∏è PowerPoint Automation Failed</h2>
        
        <h3>üö® Error Details:</h3>
        <p><strong>Error:</strong> {error_message}</p>
        <p><strong>Timestamp:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h3>üìù Execution Logs:</h3>
        <pre>{self._format_logs_plain(logs)}</pre>
        
        <p><em>Please check the logs above for troubleshooting information.</em></p>
        """
        
        return self._send_custom_email(subject, body)
    
    def _send_custom_email(self, subject, body):
        """Send custom email with HTML body"""
        if not self.enabled:
            print("Email logging is disabled due to incomplete configuration.")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.sender_email, self.sender_password)
            
            text = msg.as_string()
            server.sendmail(self.sender_email, self.recipient_email, text)
            server.quit()
            
            print(f"SUCCESS: Email sent successfully to {self.recipient_email}")
            return True
            
        except Exception as e:
            print(f"ERROR: Error sending email: {str(e)}")
            return False
    
    def _format_logs(self, logs):
        """Format logs as HTML"""
        html_logs = "<h3>üìã Execution Logs:</h3><ul>"
        for log in logs:
            # Color code different types of logs
            if "ERROR" in log:
                html_logs += f'<li style="color: red;">‚ùå {log}</li>'
            elif "SUCCESS" in log:
                html_logs += f'<li style="color: green;">‚úÖ {log}</li>'
            elif "ITERATION" in log:
                html_logs += f'<li style="color: blue;">üîÑ {log}</li>'
            else:
                html_logs += f'<li>üìù {log}</li>'
        html_logs += "</ul>"
        return html_logs
    
    def _format_logs_plain(self, logs):
        """Format logs as plain text"""
        return "\n".join(logs)
    
    def test_email_connection(self):
        """Test email configuration and connection"""
        if not self.enabled:
            print("ERROR: Email configuration incomplete. Please check your .env file.")
            return False
        
        try:
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.sender_email, self.sender_password)
            server.quit()
            print("SUCCESS: Email configuration test successful!")
            return True
        except Exception as e:
            print(f"ERROR: Email configuration test failed: {str(e)}")
            return False

# Example usage and testing
if __name__ == "__main__":
    # Test the email logger
    logger = EmailLogger()
    
    if logger.enabled:
        print("Testing email configuration...")
        if logger.test_email_connection():
            # Send a test email
            test_logs = [
                "Test log message 1",
                "Test log message 2",
                "SUCCESS: Test completed"
            ]
            logger.send_log_email(test_logs, "Test Email from PowerPoint Agent")
    else:
        print("Please configure email settings in your .env file:")
        print("SENDER_EMAIL=your-email@gmail.com")
        print("SENDER_PASSWORD=your-app-password")
        print("RECIPIENT_EMAIL=recipient@example.com")
